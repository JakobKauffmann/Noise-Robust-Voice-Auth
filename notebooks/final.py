# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1COqvUt13wypWeK9kaMn9oLxDUeqgcWu-

# Speaker Verification Workflow: Training & Evaluation (Regenerate Spectrograms)

This notebook orchestrates the steps for training the speaker verification models **from scratch** (except SincNet) and evaluating the final system.

**Key Changes:**
* **Regenerates ALL spectrograms** (Train & Test) using higher quality parameters.
* **Restarts** MobileNetV2 and Fusion model training (does not resume).

**Assumptions:**
* Google Drive is mountable at `/content/drive`.
* Your workspace root is defined in the `WORKSPACE` variable below.
* All necessary Python scripts (`data_manager_v2.py`, `train_*.py`, `evaluate.py`, `make_spectrogram_pairs.py`) are located in `$WORKSPACE/scripts/`.
* The *original* raw pair CSV files (pointing to WAV files relative to `$WORKSPACE`) exist on Drive (e.g., `$WORKSPACE/data/pairs/pairs_raw_*.csv`).
* The required *original* raw WAV data exists on Drive in the locations expected by `data_manager_v2.py` and `make_spectrogram_pairs.py`.
* SincNet training has been completed previously, and `outputs/checkpoints/sincnet_best.pt` exists.

## 1. Setup Environment
"""

from google.colab import drive
import os

print("Mounting Google Drive...")
drive.mount('/content/drive', force_remount=True)

# --- IMPORTANT: SET YOUR WORKSPACE PATH ---
WORKSPACE = "/content/drive/Shareddrives/VoiceAuth" # Adjust if necessary

print(f"Changing directory to: {WORKSPACE}")
os.chdir(WORKSPACE)

# Verify directory change and check for scripts
!pwd
!ls scripts/data_manager_v2.py scripts/make_spectrogram_pairs.py

"""## 2. Regenerate *Train* Spectrograms (Higher Quality)

This step uses `make_spectrogram_pairs.py` to regenerate the **training** spectrograms with improved parameters.

* Reads the *original raw training pair CSV* (`pairs_raw_train.csv`).
* Uses the corresponding *local raw WAV files* (assumed copied previously or by `data_manager_v2.py` if run with `copy_raw_train`).
* Generates spectrogram images locally (`/content/data/spectrograms/noisy_train/`).
* Creates the *new training spectrogram pair CSV* (`pairs_spec_train_local.csv`) on Drive, containing paths to the *local* images.
"""

print("--- Regenerating TRAIN Spectrograms (Higher Quality) ---")

# Define local output directory for spectrogram images
LOCAL_SPEC_DIR_TRAIN = "/content/data/spectrograms/noisy_train/"

# Define input raw pair CSV (original one on Drive)
RAW_CSV_TRAIN = f"{WORKSPACE}/data/pairs/pairs_raw_train.csv"

# Define output spectrogram pair CSV (containing LOCAL paths, saved to Drive)
SPEC_CSV_LOCAL_TRAIN = f"{WORKSPACE}/data/pairs/pairs_spec_train_local.csv"

# Ensure local output directory exist
!mkdir -p {LOCAL_SPEC_DIR_TRAIN}
# Optional: Clean the directory first to ensure regeneration
# print(f"Cleaning existing train spectrograms in {LOCAL_SPEC_DIR_TRAIN}...")
# !rm -rf {LOCAL_SPEC_DIR_TRAIN}/*

print("Generating Train Spectrograms...")
!python scripts/make_spectrogram_pairs.py \
  "{RAW_CSV_TRAIN}" \
  "{LOCAL_SPEC_DIR_TRAIN}" \
  "{SPEC_CSV_LOCAL_TRAIN}" \
  --n_mels 80 \
  --n_fft 512 \
  --hop_length 160 \
  --img_size 224 \
  --img_format png \
  --duration 3.0

"""## **NEW**: Copy Generated Train Spectrograms to Drive"""

print("--- Copying Generated TRAIN Spectrograms to Drive ---")

# Define the corresponding directory on DRIVE to save the images
DRIVE_SPEC_DIR_TRAIN = f"{WORKSPACE}/data/spectrograms/noisy_train/" # Or your preferred Drive path

# Define the source (local) directory
LOCAL_SPEC_DIR_TRAIN = "/content/data/spectrograms/noisy_train/"

# Ensure Drive directory exists
!mkdir -p "{DRIVE_SPEC_DIR_TRAIN}"

print(f"Copying from {LOCAL_SPEC_DIR_TRAIN} to {DRIVE_SPEC_DIR_TRAIN}...")
# Use cp -r (recursive) and -n (no-clobber/don't overwrite existing)
# Copy contents of the local dir into the drive dir
!cp -r -n {LOCAL_SPEC_DIR_TRAIN}* "{DRIVE_SPEC_DIR_TRAIN}"
print("Copy complete.")

"""## 3. Train MobileNetV2 (From Scratch)

Train the MobileNetV2 model from scratch (or ImageNet pre-training) using the newly generated, higher-quality training spectrograms.
"""

# Define path to the LOCAL spectrogram training CSV (regenerated in step 3)
SPEC_TRAIN_CSV_LOCAL = f"{WORKSPACE}/data/pairs/pairs_spec_train_local.csv"

# Optional: Clean previous MobileNetV2 checkpoints/metrics if restarting fully
# print("Cleaning previous MobileNetV2 outputs...")
# !rm -f outputs/checkpoints/mobilenetv2_*.pt
# !rm -f outputs/metrics/mobilenetv2_*.json

print("--- Training MobileNetV2 From Scratch ---")
!python -m scripts.train_mobilenetv2 \
  "{SPEC_TRAIN_CSV_LOCAL}" \
  --output_dir outputs \
  --device cuda \
  --epochs 50 \
  --batch_size 256 \
  --num_workers 8 \
  --lr 1e-4 \
  --patience 5 \
  --seed 42 \
  --freeze_features # Keep features frozen initially (can be changed to --no-freeze_features)
  # DO NOT USE --resume

"""## 4. Train Fusion Model (From Scratch)

Train the final fusion model using the best SincNet checkpoint and the best MobileNetV2 checkpoint (from the training run just completed), using the prepared local datasets.

### Load the preprocessed SincNet train NPY files to local runtime
"""

# Define paths
WORKSPACE = "/content/drive/Shareddrives/VoiceAuth" # Adjust if necessary
NPY_CSV_ON_DRIVE = f"{WORKSPACE}/data/pairs/pairs_raw_train_preprocessed_drive.csv"
LOCAL_CSV_PATH = "/tmp/pairs_raw_train_preprocessed_drive.csv" # Save to temporary local storage

# Copy the CSV from Drive to local /tmp directory
print(f"Copying NPY list CSV from {NPY_CSV_ON_DRIVE} to {LOCAL_CSV_PATH}...")
!cp -f "{NPY_CSV_ON_DRIVE}" "{LOCAL_CSV_PATH}"
print("CSV copy complete.")

# Set workspace path (still needed for resolving paths *within* the CSV if they are relative)
WORKSPACE="/content/drive/Shareddrives/VoiceAuth"

# Define the LOCAL CSV path
LOCAL_CSV_PATH="/tmp/pairs_raw_train_preprocessed_drive.csv"

# Define the LOCAL base directory where NPY files should be copied
LOCAL_NPY_TARGET_DIR="/content/data/raw_audio_preprocessed/noisy_train/"

# --- Run the copy script using the LOCAL CSV ---
!echo "--- Copying Train NPY files listed in LOCAL CSV from Drive to Local ---"
!python scripts/copy_npy_from_csv.py \
  --npy_csv_drive=$LOCAL_CSV_PATH \
  --drive_workspace_dir=$WORKSPACE \
  --local_npy_base_dir=$LOCAL_NPY_TARGET_DIR \
  # --force_copy # Optional: Add this flag to overwrite existing local .npy files

# %cd
# %cd /content/drive/Shareddrives/VoiceAuth
# Set your workspace path
WORKSPACE="/content/drive/Shareddrives/VoiceAuth" # Adjust if necessary

# Define the CSV containing DRIVE paths to NPY files
NPY_CSV_ON_DRIVE="/content/drive/Shareddrives/VoiceAuth/data/pairs/pairs_raw_train_preprocessed_drive.csv"

# Define the LOCAL base directory where NPY files should be copied
LOCAL_NPY_TARGET_DIR="/content/data/raw_audio_preprocessed/noisy_train/"

# --- Run the copy script ---
!echo "--- Copying Train NPY files listed in CSV from Drive to Local ---"
!python -m scripts.copy_npy_from_csv \
  --npy_csv_drive=$NPY_CSV_ON_DRIVE \
  --drive_workspace_dir=$WORKSPACE \
  --local_npy_base_dir=$LOCAL_NPY_TARGET_DIR \
  # --force_copy # Optional: Add this flag to overwrite existing local .npy files

# Define input CSVs (pointing to local preprocessed raw and local spec data)
RAW_TRAIN_PREPROCESSED_CSV = f"{WORKSPACE}/data/pairs/pairs_raw_train_preprocessed_local.csv"
SPEC_TRAIN_CSV_LOCAL = f"{WORKSPACE}/data/pairs/pairs_spec_train_local.csv" # Regenerated in step 3

# Define paths to best embedder checkpoints
SINC_BEST_CKPT = "outputs/checkpoints/sincnet_best.pt" # Assumes this exists
MOBILENET_BEST_CKPT = "outputs/checkpoints/mobilenetv2_best.pt" # From step 5

print("--- Starting Fusion Model Training From Scratch ---")
!python -m scripts.train_fusion \
  "{RAW_TRAIN_PREPROCESSED_CSV}" \
  "{SPEC_TRAIN_CSV_LOCAL}" \
  --sincnet_ckpt "{SINC_BEST_CKPT}" \
  --mobilenet_ckpt "{MOBILENET_BEST_CKPT}" \
  --output_dir outputs \
  --device cuda \
  --epochs 50 \
  --batch_size 256 \
  --num_workers 8 \
  --lr 1e-4 \
  --patience 5 \
  --seed 42 \
  --freeze_embedders # Keep SincNet/MobileNet frozen (default)
  # DO NOT USE --resume

"""## 5. Prepare Raw Test Data Locally (NPY Format)

This step ensures the raw test audio files (.wav) are copied locally and then pre-processed into the `.npy` format needed for the SincNet branch during evaluation. It also generates the necessary CSVs pointing to these local `.npy` files.

* Copies original raw test WAVs (clean, noisy, filtered) from Drive to local.
* Pre-processes local WAVs into local `.npy` format (also saves NPY to Drive).
* Generates `*_preprocessed_local.csv` and `*_preprocessed_drive.csv` files on Drive.
"""

print("--- Preparing Raw Test Data Locally (Copying WAVs, Preprocessing to NPY, Generating NPY CSVs) ---")
!python -m scripts.data_manager_v23 \
  --drive_workspace_dir="{WORKSPACE}" \
  --action copy_raw_test preprocess_raw_test gen_csv_local gen_csv_drive \
  --force_preprocess # Force regeneration of NPY files for test sets
  # --force_copy # Optional: Overwrite existing local WAV files

"""## 6. Regenerate *Test* Spectrograms (Higher Quality)

This step uses `make_spectrogram_pairs.py` to regenerate the **test** spectrograms with improved parameters.

* Reads the *original raw test pair CSVs* (`pairs_raw_clean_test.csv`, etc.).
* Uses the corresponding *local raw WAV files* (copied/verified in Step 2).
* Generates spectrogram images locally (`/content/data/spectrograms/...`).
* Creates the *new test spectrogram pair CSVs* (`pairs_spec_*_test_local.csv`) on Drive, containing paths to the *local* images.
"""

print("--- Regenerating TEST Spectrograms (Higher Quality) ---")

# Define local output directories for spectrogram images
LOCAL_SPEC_DIR_CLEAN = "/content/data/spectrograms/clean_test/"
LOCAL_SPEC_DIR_NOISY = "/content/data/spectrograms/noisy_test/"
LOCAL_SPEC_DIR_FILTERED = "/content/data/spectrograms/filtered_test/"

# Define input raw pair CSVs (original ones on Drive)
RAW_CSV_CLEAN = f"{WORKSPACE}/data/pairs/pairs_raw_clean_test.csv"
RAW_CSV_NOISY = f"{WORKSPACE}/data/pairs/pairs_raw_noisy_test.csv"
RAW_CSV_FILTERED = f"{WORKSPACE}/data/pairs/pairs_raw_filtered_test.csv"

# Define output spectrogram pair CSVs (containing LOCAL paths, saved to Drive)
SPEC_CSV_LOCAL_CLEAN = f"{WORKSPACE}/data/pairs/pairs_spec_clean_test_local.csv"
SPEC_CSV_LOCAL_NOISY = f"{WORKSPACE}/data/pairs/pairs_spec_noisy_test_local.csv"
SPEC_CSV_LOCAL_FILTERED = f"{WORKSPACE}/data/pairs/pairs_spec_filtered_test_local.csv"

# Ensure local output directories exist and are clean (optional)
!mkdir -p {LOCAL_SPEC_DIR_CLEAN}; # !rm -rf {LOCAL_SPEC_DIR_CLEAN}/*
!mkdir -p {LOCAL_SPEC_DIR_NOISY}; # !rm -rf {LOCAL_SPEC_DIR_NOISY}/*
!mkdir -p {LOCAL_SPEC_DIR_FILTERED}; # !rm -rf {LOCAL_SPEC_DIR_FILTERED}/*

print("Generating Clean Test Spectrograms...")
!python scripts/make_spectrogram_pairs.py \
  "{RAW_CSV_CLEAN}" \
  "{LOCAL_SPEC_DIR_CLEAN}" \
  "{SPEC_CSV_LOCAL_CLEAN}" \
  --n_mels 80 --n_fft 512 --hop_length 160 --img_size 224 --img_format png --duration 3.0

print("Generating Noisy Test Spectrograms...")
!python scripts/make_spectrogram_pairs.py \
  "{RAW_CSV_NOISY}" \
  "{LOCAL_SPEC_DIR_NOISY}" \
  "{SPEC_CSV_LOCAL_NOISY}" \
  --n_mels 80 --n_fft 512 --hop_length 160 --img_size 224 --img_format png --duration 3.0

print("Generating Filtered Test Spectrograms...")
!python scripts/make_spectrogram_pairs.py \
  "{RAW_CSV_FILTERED}" \
  "{LOCAL_SPEC_DIR_FILTERED}" \
  "{SPEC_CSV_LOCAL_FILTERED}" \
  --n_mels 80 --n_fft 512 --hop_length 160 --img_size 224 --img_format png --duration 3.0

"""## **NEW**: Copy Generated Test Spectrograms to Drive"""

print("--- Copying Generated TEST Spectrograms to Drive ---")

# Define the corresponding directories on DRIVE to save the images
DRIVE_SPEC_DIR_CLEAN = f"{WORKSPACE}/data/spectrograms/clean_test/"
DRIVE_SPEC_DIR_NOISY = f"{WORKSPACE}/data/spectrograms/noisy_test/"
DRIVE_SPEC_DIR_FILTERED = f"{WORKSPACE}/data/spectrograms/filtered_test/"

# Define the source (local) directories
LOCAL_SPEC_DIR_CLEAN = "/content/data/spectrograms/clean_test/"
LOCAL_SPEC_DIR_NOISY = "/content/data/spectrograms/noisy_test/"
LOCAL_SPEC_DIR_FILTERED = "/content/data/spectrograms/filtered_test/"

# Ensure Drive directories exist
!mkdir -p "{DRIVE_SPEC_DIR_CLEAN}"
!mkdir -p "{DRIVE_SPEC_DIR_NOISY}"
!mkdir -p "{DRIVE_SPEC_DIR_FILTERED}"

print(f"Copying Clean Test Specs...")
!cp -r -n {LOCAL_SPEC_DIR_CLEAN}* "{DRIVE_SPEC_DIR_CLEAN}"
print(f"Copying Noisy Test Specs...")
!cp -r -n {LOCAL_SPEC_DIR_NOISY}* "{DRIVE_SPEC_DIR_NOISY}"
print(f"Copying Filtered Test Specs...")
!cp -r -n {LOCAL_SPEC_DIR_FILTERED}* "{DRIVE_SPEC_DIR_FILTERED}"
print("Copy complete.")

"""## 7. Evaluate Fusion Model

Evaluate the best trained fusion model (from step 6) on the three test conditions using the locally prepared data (regenerated spectrograms).
"""

# Define paths to the LOCAL preprocessed raw test CSVs (generated in step 2)
RAW_TEST_PREP_CSV_CLEAN = f"{WORKSPACE}/data/pairs/pairs_raw_clean_test_preprocessed_local.csv"
RAW_TEST_PREP_CSV_NOISY = f"{WORKSPACE}/data/pairs/pairs_raw_noisy_test_preprocessed_local.csv"
RAW_TEST_PREP_CSV_FILTERED = f"{WORKSPACE}/data/pairs/pairs_raw_filtered_test_preprocessed_local.csv"

# Define paths to the LOCAL spectrogram test CSVs (regenerated in step 4)
SPEC_TEST_CSV_LOCAL_CLEAN = f"{WORKSPACE}/data/pairs/pairs_spec_clean_test_local.csv"
SPEC_TEST_CSV_LOCAL_NOISY = f"{WORKSPACE}/data/pairs/pairs_spec_noisy_test_local.csv"
SPEC_TEST_CSV_LOCAL_FILTERED = f"{WORKSPACE}/data/pairs/pairs_spec_filtered_test_local.csv"

# Define path to the best fusion checkpoint (from step 6)
FUSION_BEST_CKPT = "outputs/checkpoints/fusion_best.pt"

print("--- Evaluating Fusion Model ---")
!python scripts/evaluate.py \
    "{FUSION_BEST_CKPT}" \
    --output_dir outputs \
    --device cuda \
    --batch_size 256 \
    --num_workers 8 \
    --test_splits \
      clean "{RAW_TEST_PREP_CSV_CLEAN}" "{SPEC_TEST_CSV_LOCAL_CLEAN}" \
      noisy "{RAW_TEST_PREP_CSV_NOISY}" "{SPEC_TEST_CSV_LOCAL_NOISY}" \
      filtered "{RAW_TEST_PREP_CSV_FILTERED}" "{SPEC_TEST_CSV_LOCAL_FILTERED}"
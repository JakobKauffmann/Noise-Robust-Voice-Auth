# -*- coding: utf-8 -*-
"""voiceAuthSetup.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14h6Tlry1ZfiqOb59DLmH27W5DXKU3lqe
"""

import os
import json
import pprint as pp

# Path to the root directory (modify as needed)
root_dir = "/content/drive/Shareddrives/CS 286 Project Data/extracted/extracted_vox1_dev/wav/"

# Dictionary to store the mapping
celeb_dict = {}

# Traverse the directory
for celeb_id in sorted(os.listdir(root_dir)):  # e.g., id00001, id00002, etc.
    celeb_path = os.path.join(root_dir, celeb_id)
    if os.path.isdir(celeb_path):  # Ensure it's a directory
        celeb_dict[celeb_id] = {}

        for sub_id in sorted(os.listdir(celeb_path)):  # e.g., sub-folders
            sub_path = os.path.join(celeb_path, sub_id)
            if os.path.isdir(sub_path):
                celeb_dict[celeb_id][sub_id] = sorted(
                    [wav for wav in os.listdir(sub_path) if wav.endswith(".wav")]
                )
pp.pp(celeb_dict)
# # Save to a JSON file
# output_json_path = "vox1_mapping.json"
# with open(output_json_path, "w") as f:
#     json.dump(celeb_dict, f, indent=4)

# print(f"JSON mapping saved to {output_json_path}")

# Commented out IPython magic to ensure Python compatibility.
# %cp "/content/drive/Shareddrives/CS 286 Project Data/MUSAN/musan.tar.gz" /content/MUSAN/

!tar -xvf /content/MUSAN/musan.tar.gz -C /content/MUSAN/extracted/

# Commented out IPython magic to ensure Python compatibility.
# %mv /content/MUSAN/extracted/musan/ "/content/drive/Shareddrives/CS 286 Project Data/MUSAN/"

# Commented out IPython magic to ensure Python compatibility.
# %mv /content/drive/

from google.colab import drive
drive.mount('/content/drive')

!curl https://rclone.org/install.sh | sudo bash

!rclone config

#!rclone ls "gdrive1:" --drive-trashed-only
!rclone move "gdrive1:extracted/extracted_vox1_dev/wav/" "gdrive1:restored_folder" --drive-trashed-only --progress

!rclone move "gdrive1:/restored_folder" "gdrive1:/extracted/extracted_vox1_dev/wav" --include "*/*" -P --progress

!cp /content/drive/shareddrives/CS 286

import os
import json
from collections import defaultdict

# List of root directories to scan (Modify these paths)
root_dirs = [
    # "/content/drive/Shareddrives/CS 286 Project Data/vox1/rclone_to_copy/txt",
    # "/content/drive/Shareddrives/CS 286 Project Data/vox1/rclone_to_copy/txt (1)",
    "/content/drive/Shareddrives/CS 286 Project Data/vox1/txt"
]
# root_dirs = ["/content/drive/Shareddrives/VoxCeleb1/Dev/wav"]

# Dictionary to store the structured mapping
# file_structure = defaultdict(lambda: defaultdict(list))  # Keeps lists to store separate wav files

# Dictionary to store the structured mapping
file_structure = {}

# Traverse all root directories
for root_dir in root_dirs:
    if os.path.exists(root_dir):
        structure_key = os.path.basename(root_dir)  # Keep track of source folder
        file_structure[structure_key] = {}  # Separate structure for each root

        for celeb_id in sorted(os.listdir(root_dir)):  # ID folders (idXXXXX)
            celeb_path = os.path.join(root_dir, celeb_id)
            if os.path.isdir(celeb_path):
                file_structure[structure_key][celeb_id] = {}  # Preserve separate idXXXXX

                for sub_id in sorted(os.listdir(celeb_path)):  # Subfolders
                    sub_path = os.path.join(celeb_path, sub_id)
                    if os.path.isdir(sub_path):
                        wav_files = sorted(
                            [f for f in os.listdir(sub_path) if f.endswith(".txt")]
                        )
                        if wav_files:
                          print(wav_files)
                          print(structure_key, celeb_id, sub_id)
                          file_structure[structure_key][celeb_id][sub_id] = wav_files  # Store separately per root


# Save JSON output
json_path = "/content/drive/Shareddrives/CS 286 Project Data/txt_paths.json"
with open(json_path, "w") as f:
    json.dump(file_structure, f, indent=4)

#print(file_structure)
print(f"✅ JSON mapping saved at: {json_path}")

import os
import shutil
import json

# Load the JSON data (modify the path if needed)
json_path = "/content/drive/Shareddrives/CS 286 Project Data/txt_paths.json"
with open(json_path, "r") as f:
    data = json.load(f)

# Define source root directories (modify accordingly)

source_roots = [
    # "/content/drive/Shareddrives/CS 286 Project Data/vox1/rclone_to_copy/txt",
    # "/content/drive/Shareddrives/CS 286 Project Data/vox1/rclone_to_copy/txt (1)",
    "/content/drive/Shareddrives/CS 286 Project Data/vox1/txt"
]
# Define the new structured root folder where files will be organized
destination_root = "/content/drive/Shareddrives/VoxCeleb1/Txt/wav"

# Track moved and duplicate files
moved_files = []
duplicates = []

# Iterate through each ID and its subfolders
for subfolders in data['txt']:
    for k, v in subfolders:
        for wav_file in wav_files:
            # Construct possible source paths (checking all root folders)
            source_path = None
            for root in source_roots:
                print(wav_files)
                possible_path = os.path.join(root, subfolders, wave_file)
                if os.path.exists(possible_path):
                    source_path = possible_path
                    break  # Use the first valid path found

            if not source_path:
                print(f"Skipping {wav_file} in {sub_id}, {id_key} (not found)")
                continue

            # Construct destination path
            dest_dir = os.path.join(destination_root, id_key, sub_id)
            dest_file = os.path.join(dest_dir, wav_file)

            # Ensure directory exists
            os.makedirs(dest_dir, exist_ok=True)

            # Check if file already exists
            if os.path.exists(dest_file):
                print(f"Duplicate found: {dest_file} (ignoring)")
                duplicates.append(dest_file)
            else:
                # Move file
                shutil.move(source_path, dest_file)
                moved_files.append(dest_file)
                print(f"Moved: {source_path} → {dest_file}")

# Summary
print(f"\nTotal Moved Files: {len(moved_files)}")
print(f"Total Duplicates Ignored: {len(duplicates)}")

import os
import shutil
import json
import pprint

# Load the JSON data (modify the path if needed)
json_path = "/content/drive/Shareddrives/CS 286 Project Data/dev_paths.json"
with open(json_path, "r") as f:
    data = json.load(f)

# pprint.pp(data["wav"])
for
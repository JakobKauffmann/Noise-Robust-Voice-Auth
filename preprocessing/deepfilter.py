# -*- coding: utf-8 -*-
"""DeepFilter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GVg67gCy4tKgIUMHUbjVSqKqxQ8opEwM
"""

from google.colab import drive
drive.mount('/content/drive')

!mkdir "/content/drive/Shareddrives/VoxCeleb1/Dev_Filtered/wav/id10001"
!mkdir "/content/drive/Shareddrives/VoxCeleb1/Dev_Filtered/wav/id10001/7gWzIy6yIIk"
!deepFilter -i /content/drive/Shareddrives/VoxCeleb1/Dev_Augmented/wav/id10001/7gWzIy6yIIk -o "/content/drive/Shareddrives/VoxCeleb1/Dev_Filtered/wav/id10001/7gWzIy6yIIk"
# !deepFilter --help

original, sr1 = torchaudio.load("/content/drive/Shareddrives/VoxCeleb1/Dev/wav/id10001/7gWzIy6yIIk/00001.wav")
noisy, sr = torchaudio.load("/content/drive/Shareddrives/VoxCeleb1/Dev_Augmented/wav/id10001/7gWzIy6yIIk/00001.wav")
filtered, sr2 = torchaudio.load("/content/drive/Shareddrives/VoxCeleb1/Dev_Filtered/wav/id10001/7gWzIy6yIIk/00001_DeepFilterNet3.wav")
display(Audio(original, rate = sr1))
display(Audio(noisy, rate = sr))
display(Audio(filtered, rate=sr2))

"""# install required packages"""

!pip install torch torchaudio
!pip install DeepFilterNet
!pip install pystoi pesq tqdm pandas

!pip install torch torchaudio
!pip install DeepFilterNet
!pip install pystoi pesq tqdm pandas

"""# Write script to .py file"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile process_voxceleb.py
# import os
# import subprocess
# from tqdm import tqdm
# import argparse
# import glob
# 
# def ensure_dir(directory):
#     """Create directory if it doesn't exist"""
#     if not os.path.exists(directory):
#         os.makedirs(directory)
#         return True
#     return False
# 
# def process_voxceleb(source_dir, target_dir, dry_run=False):
#     """
#     Process VoxCeleb dataset with DeepFilterNet
# 
#     Args:
#         source_dir: Path to source VoxCeleb directory (e.g., /content/drive/Shareddrives/VoxCeleb1/Dev_Augmented/wav)
#         target_dir: Path to target directory for filtered files (e.g., /content/drive/Shareddrives/VoxCeleb1/Dev_Filtered/wav)
#         dry_run: If True, only print commands without executing
#     """
#     # Get all speaker IDs (directories starting with 'id')
#     speaker_dirs = sorted([d for d in os.listdir(source_dir) if d.startswith('id')])
# 
#     # Create a log file to track progress
#     log_file = os.path.join(os.path.dirname(target_dir), "deepfilter_processing.log")
# 
#     # Counter for statistics
#     stats = {
#         'total_speakers': len(speaker_dirs),
#         'total_sessions': 0,
#         'completed_sessions': 0,
#         'failed_sessions': 0
#     }
# 
#     print(f"Found {stats['total_speakers']} speaker directories")
# 
#     # Loop through all speaker IDs
#     for speaker_id in tqdm(speaker_dirs, desc="Processing speakers"):
#         # Create the speaker directory in target
#         speaker_target_dir = os.path.join(target_dir, speaker_id)
#         ensure_dir(speaker_target_dir)
# 
#         # Get session directories for this speaker
#         speaker_source_dir = os.path.join(source_dir, speaker_id)
#         session_dirs = sorted(os.listdir(speaker_source_dir))
#         stats['total_sessions'] += len(session_dirs)
# 
#         # Loop through all sessions for this speaker
#         for session_id in session_dirs:
#             session_source_dir = os.path.join(speaker_source_dir, session_id)
#             session_target_dir = os.path.join(speaker_target_dir, session_id)
# 
#             # Create the session directory in target
#             is_new_dir = ensure_dir(session_target_dir)
# 
#             # Construct the deepFilter command
#             cmd = [
#                 'deepFilter',
#                 '-i', session_source_dir,
#                 '-o', session_target_dir
#             ]
# 
#             # Only process if the directory was newly created or is empty
#             if is_new_dir or len(os.listdir(session_target_dir)) == 0:
#                 cmd_str = ' '.join(cmd)
#                 print(f"Running: {cmd_str}")
# 
#                 if not dry_run:
#                     try:
#                         # Execute the deepFilter command
#                         result = subprocess.run(cmd, capture_output=True, text=True)
# 
#                         # Check if command was successful
#                         if result.returncode == 0:
#                             stats['completed_sessions'] += 1
#                             # Log success
#                             with open(log_file, 'a') as f:
#                                 f.write(f"SUCCESS: {session_source_dir} -> {session_target_dir}\n")
#                         else:
#                             stats['failed_sessions'] += 1
#                             # Log error
#                             with open(log_file, 'a') as f:
#                                 f.write(f"ERROR: {session_source_dir} -> {session_target_dir}\n")
#                                 f.write(f"  {result.stderr}\n")
#                             print(f"Error processing {session_source_dir}: {result.stderr}")
#                     except Exception as e:
#                         stats['failed_sessions'] += 1
#                         # Log exception
#                         with open(log_file, 'a') as f:
#                             f.write(f"EXCEPTION: {session_source_dir} -> {session_target_dir}\n")
#                             f.write(f"  {str(e)}\n")
#                         print(f"Exception processing {session_source_dir}: {str(e)}")
#             else:
#                 print(f"Skipping {session_target_dir} (already processed)")
#                 stats['completed_sessions'] += 1
# 
#     # Print summary statistics
#     print("\nProcessing Summary:")
#     print(f"Total speakers: {stats['total_speakers']}")
#     print(f"Total sessions: {stats['total_sessions']}")
#     print(f"Completed sessions: {stats['completed_sessions']}")
#     print(f"Failed sessions: {stats['failed_sessions']}")
#     print(f"Log file: {log_file}")
# 
# def main():
#     parser = argparse.ArgumentParser(description="Process VoxCeleb dataset with DeepFilterNet")
#     parser.add_argument("--source", type=str, required=True,
#                        help="Source directory (e.g., /content/drive/Shareddrives/VoxCeleb1/Dev_Augmented/wav)")
#     parser.add_argument("--target", type=str, required=True,
#                        help="Target directory (e.g., /content/drive/Shareddrives/VoxCeleb1/Dev_Filtered/wav)")
#     parser.add_argument("--dry-run", action="store_true",
#                        help="Print commands without executing")
#     parser.add_argument("--resume", action="store_true",
#                        help="Resume processing (skip already processed directories)")
# 
#     args = parser.parse_args()
# 
#     # Ensure target directory exists
#     ensure_dir(args.target)
# 
#     # Process the dataset
#     process_voxceleb(args.source, args.target, args.dry_run)
# 
# if __name__ == "__main__":
#     main()

source_dir = "/content/drive/Shareddrives/VoxCeleb1/Test_Augmented/wav/wav"
target_dir = "/content/drive/Shareddrives/VoxCeleb1/Test_Filtered/wav"

!python process_voxceleb.py --source "$source_dir" --target "$target_dir"
